{#
/**
 * @file
 * BSOS Paragraphs template for displaying an Accordion (Collapse).
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('bsos_paragraphs/bsos-paragraphs') }}

{# The template default set classes. #}
{%
set classes = [
'clearfix',
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}

{# Sets Unique ID for Accordion from Paragraph ID. #}
{% set paragraph_id = 'accordion-' ~ paragraph.id.value %}

{# Prints Accordion template. #}
<div{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }} role="tablist" aria-multiselectable="true">
  <div>
    <div class="card panel panel-default">
      {# Loop through all of the accordion sections. #}
      {% for key, item in content.field_bsos_accordion_section if key|first != '#' %}
        <div class="card-header panel-heading" role="tab" id="heading-{{ paragraph_id }}-{{ key + 1 }}">
          <div class="panel-title">
            <a data-toggle="collapse" data-parent="{{ paragraph_id }}" href="#collapse-{{ paragraph_id }}-{{ key + 1 }}" aria-expanded="true" aria-controls="collapse-{{ paragraph_id }}-{{ key + 1 }}">
              {# Print the accordion section title. #}
              {{ item['#paragraph'].field_bsos_accordion_sec_title.value }}
            </a>
          </div>
        </div>
        <div id="collapse-{{ paragraph_id }}-{{ key + 1 }}" class="card-block panel-collapse collapse" role="tabpanel" aria-labelledby="heading-{{ paragraph_id }}-{{ key + 1 }}">
          {# Loop through all of the accordion section bodies. #}
          {% for body_key, body_item in item['#paragraph'].field_bsos_accordion_sec_body %}
            {# Use the same render array as item and set the '#paragraph'. #}
            {% set section_body = item %}
            {% set section_body = section_body|merge({'#paragraph': section_body['#paragraph'].field_bsos_accordion_sec_body[body_key].entity}) %}
            {# Remove the cache keys so it doesn't repeat the first value. #}
            {% set section_body = section_body|merge({'#cache': {}}) %}
            {# Print the compiled section body. #}
            {{ section_body }}
          {% endfor %}
        </div>
      {% endfor %}
    </div>
  </div>
</div>
