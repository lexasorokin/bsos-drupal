<?php

/**
 * @file
 * Functions to support theming in the BSOS theme.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Theme\ThemeSettings;
use Drupal\system\Form\ThemeSettingsForm;
use Drupal\Core\Form;
use Drupal\block\Entity\Block;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 */
function bsos_drupal9_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['bsos_drupal9_settings']['social_icon']['facebook_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Link'),
    '#default_value' => theme_get_setting('facebook_url', 'bsos_drupal9'),
  );
  $form['bsos_drupal9_settings']['social_icon']['twitter_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Link'),
    '#default_value' => theme_get_setting('twitter_url', 'bsos_drupal9'),
  );
  $form['bsos_drupal9_settings']['social_icon']['instagram_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Instagram Link'),
    '#default_value' => theme_get_setting('instagram_url', 'bsos_drupal9'),
  );
  $form['bsos_drupal9_settings']['social_icon']['youtube_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Youtube Link'),
    '#default_value' => theme_get_setting('youtube_url', 'bsos_drupal9'),
  );
  $form['bsos_drupal9_settings']['social_icon']['linkedin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin Link'),
    '#default_value' => theme_get_setting('linkedin_url', 'bsos_drupal9'),
  );
  $form['bsos_drupal9_settings']['social_icon']['custom_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Link'),
    '#default_value' => theme_get_setting('custom_url', 'bsos_drupal9'),
  );
}

// TO-DO:
// Deprecate theme_get_setting()
// https://www.drupal.org/project/drupal/issues/3035288

// Render Theme Variables
function bsos_drupal9_preprocess_page(&$variables) {
  $variables['facebook_url'] = theme_get_setting('facebook_url','bsos_drupal9');
  $variables['twitter_url'] = theme_get_setting('twitter_url','bsos_drupal9');
  $variables['instagram_url'] = theme_get_setting('instagram_url','bsos_drupal9');
  $variables['youtube_url'] = theme_get_setting('youtube_url','bsos_drupal9');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url','bsos_drupal9');
  $variables['custom_url'] = theme_get_setting('custom_url','bsos_drupal9');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bsos_drupal9_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block by Region
  if (!empty($variables['elements']['#id'])) {
    $block = \Drupal\block\Entity\Block::load($variables['elements']['#id']);

    // $region = $block->getRegion();
    // Check if methid exist in var
    // https://www.php.net/manual/en/function.method-exists.php
    // Need to check after
    if( method_exists($block, 'getRegion') ) {
      $region = $block->getRegion();
    }

    $regionParts = explode('_', $region);
    array_pop($regionParts);
    if($regionParts){
        $suggestions[] = 'block__' . implode('_', $regionParts);
    }
    // adds suggestion with region and block id
    $suggestions[] = 'block__' . $region . '__' . $variables['elements']['#id'];
    // adds suggestion with region and base_plugin_id
    $suggestions[] = 'block__' . $variables['elements']['#base_plugin_id'] . '__' . $region;
    // adds suggestion with region id
    $suggestions[] = 'block__' . $region;
  }

  // Block Content
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block_content = $variables['elements']['content']['#block_content'];
    $bundle = $block_content->bundle();
    $base = 'block__block_content';
    $suggestions[] = $base . '__' . $bundle;

    // Add suggestion based on the custom block id.
    if (isset($variables['elements']['#component_attributes']) &&
      !empty($variables['elements']['#component_attributes']['block_attributes']['id'])) {
      $suggestions[] = $base . '__' . $bundle . '__' . str_replace('-', '_', $variables['elements']['#component_attributes']['block_attributes']['id']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 * https://www.drupal.org/node/2521876#comment-10684366
 */
function bsos_drupal9_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if (($node = \Drupal::request()->attributes->get('node')) && (strpos($_SERVER['REQUEST_URI'], "revisions") == false)) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function bsos_drupal9_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
  // Add the block ID as custom attribute to block content, this will be used
  // for menu template suggestions.
  $variables['content']['#attributes']['block'] = $variables['elements']['#id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bsos_drupal9_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $menu_name = $variables['menu_name'];
  $is_mobile_menu = strpos($menu_name, 'mobile');
  if (isset($variables['attributes']['block'])) {
    $block = \Drupal\block\Entity\Block::load($variables['attributes']['block']);
    $region = $block->getRegion();
    $suggestions[] = 'menu__' . $region;
    $suggestions[] = 'menu__' . $region . '__' . $menu_name;
  }
  // If menu name contains the word mobile, create common template suggestion.
  if ((isset($variables['attributes']['block'])) && ($is_mobile_menu !== false)) {
    $suggestions[] = 'menu__' . $region . '__mobile-menus';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bsos_drupal9_theme_suggestions_form_alter(array &$suggestions, array $variables) {

  // Suggesstions by entity type
  if (!empty($variables['element']['#entity_type'])) {
    $entityType = $variables['element']['#entity_type'];
    if (!empty($entityType)) {
      $suggestions[] = 'form__' . $entityType;
    }
  }

  // Element ID Form Suggesstions
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);

  // General Form Suggesstions
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#form_id']);
}
